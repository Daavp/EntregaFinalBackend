product manager info
/* // Utilizar la clase */
// const manager = new ProductManager("./products.json");

// const principalFunction =async ()=> {
//     try {
/*         Producto Prueba agregado */

//         // const addedProduct = await manager.addProduct({
//         //     title:"producto prueba 2",
//         //     description:"Este es un producto prueba",
//         //     price:"200",
//         //     thumbnail:"Sin imagen",
//         //     code:"abc123",
//         //     stock:"25"
//         // });
//         // console.log("addedProduct: ",addedProduct);

/*          Producto Busqueda ID */

//         // const findProductById = await manager.getProductsById(3);
//         // console.log("findProductById: ", findProductById);

// /*          allProducts Busqueda */

//         // const allProducts = await manager.getProducts();

/*        Updateproducts elegir que se quiere modificar */

//         // const updatedProduct = await manager.updateProduct(
//         //     2, /* Cambiar ID de producto */
//         //     {
//         // //     title:"",
//         //     description:"Descripción modificada",
//         // //     price:"",
//         // //     thumbnail:"",
//         // //     code:"",
//         // //     stock:""

//         // });
//         // console.log("updatedProduct: ", updatedProduct)

/*        DeleteProduct */
//         const deletedProduct = await manager.deleteProduct(3);
//         console.log("DeleteProduct: ",deletedProduct)
//     } catch (error) {
//         console.log(error.message);
//     }
// }

// principalFunction();

Views
/* router.get("/realTimeProductsDB", async(req,res)=>{
    try {
        const products = await productsModel.find(); //find en la DB
        return res.render("realTimeProducts",{products});
    } catch (error) {
        console.log(error.message);
        res.status(500).send({status:"Error al obtener los productos"})
    }
    }); */


//Ruta de registro
    AuthRoutes
    /* router.post("/signup",async(req,res)=>{
    try {
        const userForm = req.body;
        //Validacion de correo
        const user = await userModel.findOne({email:userForm.email})
        if(!user){//Si no encuentra, registrar al usuario
                if(userForm.email.endsWith('@coder.com')){//verificacion coder
                    console.log("Es usuario Coder!");
                    const newUserCoder = {
                        first_name:userForm.first_name,
                        last_name:userForm.last_name,
                        email:userForm.email,
                        age:userForm.age,
                        password:createHash(userForm.password),
                        role:"admin"
                    };
                   await userModel.create(newUserCoder);
                    return res.send('<div> Registro completado con exito, inicie sesión con sus datos <a href="/login">Inicie sesión en la pagina de login</a></div>')};
            const newUserCreated = {
                first_name:userForm.first_name,
                last_name:userForm.last_name,
                email:userForm.email,
                age:userForm.age,
                password:createHash(userForm.password)
            };
            await userModel.create(newUserCreated);
           res.send('<div> Registro completado con exito, inicie sesión con sus datos <a href="/login">Inicie sesión en la pagina de login</a></div>')
        } else{
            res.send('<div> Usuario ya registrado, intente nuevamente<a href="/signup">Volver a registrarse</a></div>')
        };
    } catch (error) {
        res.send('<div>Error al registrar con los datos ingresados, <a href="/signup">Intente nuevamente</a></div>')
        console.log(error);
    }
}); */

//Ruta de logeo de usuario
router.post("/login",async(req,res)=>{
    try {
        const userLoginForm = req.body;
        //Validacion de correo
        const userDB = await userModel.findOne({email:userLoginForm.email})
        if(userDB){//Si encuentra verificar password
            if(passValidator(userLoginForm.password,userDB)){
                req.session.user = {
                    first_name: userDB.first_name,
                    last_name: userDB.last_name,
                    email: userDB.email,
                    role: userDB.role
                };
                return res.redirect("/products?page=1");
            }else{
                return res.send('<div> Correo o contraseña invalidas <a href=/login>Intenta nuevamente</a></div>')
            }
        } else{//Si no lo encuentra registrar o reintentar
            res.send('<div> Usuario no registrado <a href="/signup">Registrarse</a> o <a href="/login">Intentar nuevamente</a></div>')
        };
    } catch (error) {
        res.send('<div>Hubo un error al iniciar sesión, <a href="/signup">Intente nuevamente</a></div>')
    }
});

AuthRoutes
//Recuperar contraseña
router.post("/forgot",async(req,res)=>{
    try {
        const {email,newPassword} = req.body;
        const userDB = await userModel.findOne({email:email});
        if(userDB){//usuario registrado
            userDB.password = createHash(newPassword);
            const userUpdate = await userModel.findByIdAndUpdate(userDB._id,userDB, {new:true});
            res.send('<div> Cambio de contraseña completado con exito, inicie sesión con sus datos <a href="/login">Inicie sesión en la pagina de login</a></div>')
        } else{
            res.send('<div> Usuario no registrado <a href="/signup">Registrarse</a> o <a href="/forgot">Intentar nuevamente</a></div>') 
        }
    } catch (error) {
        res.send('<div>Hubo un error al cambiar la contraseña, intenta nuevamente <a href="/forgot">Intente nuevamente</a></div>')
    }
})

//Recuperar contraseña
router.get("/forgot", (req,res)=>{
    res.render("forgotPassword");
});